CREATE OR REPLACE PROCEDURE update_payment_type(p_id integer, p_name character varying)

AS

$$
	BEGIN
		UPDATE payment_type 
		SET name = p_name
		WHERE id = p_id;
	END;
$$
LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE update_country(p_id integer, p_name character varying, p_short_name character varying, p_code integer)

AS

$$
	BEGIN
		UPDATE country 
		SET name = p_name,
			short_name = p_short_name,
			code = p_code
		WHERE id = p_id;
	END;
$$
LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE update_color(p_id integer, p_name character varying)

AS

$$
	BEGIN
		UPDATE color 
		SET name = p_name
		WHERE id = p_id;
	END;
$$
LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE update_address_type(p_id integer, p_name character varying)

AS

$$
	BEGIN
		UPDATE address_type 
		SET name = p_name
		WHERE id = p_id;
	END;
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION catalog_deleted()
  RETURNS TRIGGER 
  LANGUAGE PLPGSQL
  AS
$$
BEGIN
		 INSERT INTO transaction_log(table_name, transaction_date)
		 VALUES('catalog',now());

	RETURN NEW;
END;
$$

CREATE OR REPLACE TRIGGER catalog_deleted
  AFTER DELETE
  ON catalog
  FOR EACH ROW
  EXECUTE PROCEDURE catalog_deleted();
 
GO

CREATE OR REPLACE FUNCTION color_deleted()
  RETURNS TRIGGER 
  LANGUAGE PLPGSQL
  AS
$$
BEGIN
		 INSERT INTO transaction_log(table_name, transaction_date)
		 VALUES('color',now());

	RETURN NEW;
END;
$$


CREATE OR REPLACE TRIGGER color_deleted
  AFTER DELETE
  ON color
  FOR EACH ROW
  EXECUTE PROCEDURE color_deleted();
 

CREATE OR REPLACE FUNCTION country_deleted()
  RETURNS TRIGGER 
  LANGUAGE PLPGSQL
  AS
$$
BEGIN
		 INSERT INTO transaction_log(table_name, transaction_date)
		 VALUES('country',now());

	RETURN NEW;
END;
$$

CREATE OR REPLACE TRIGGER country_deleted
  AFTER DELETE
  ON country
  FOR EACH ROW
  EXECUTE PROCEDURE country_deleted();

CREATE OR REPLACE FUNCTION manager_deleted()
  RETURNS TRIGGER 
  LANGUAGE PLPGSQL
  AS
$$
BEGIN
		 INSERT INTO transaction_log(table_name, transaction_date)
		 VALUES('manager',now());

	RETURN NEW;
END;
$$

CREATE OR REPLACE TRIGGER manager_deleted
  AFTER DELETE
  ON manager
  FOR EACH ROW
  EXECUTE PROCEDURE manager_deleted();
 
 
 -- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;

CREATE DATABASE OrderManagementSystem

CREATE TABLE IF NOT EXISTS public.catalog
(
    id integer NOT NULL,
    catalog_name character varying(20) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.product
(
    id integer NOT NULL,
    catalog_id integer NOT NULL,
    name character varying(50) NOT NULL,
    price numeric NOT NULL,
    color_id integer NOT NULL,
    warehouse_id integer NOT NULL,
    country_of_origin_id integer NOT NULL,
    CONSTRAINT pk_id PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.color
(
    id integer NOT NULL,
    name character varying(20) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.manager
(
    id integer NOT NULL,
    name character varying(20) NOT NULL,
    salary numeric,
    birth_date date,
    birth_place character varying(20),
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.warehouse
(
    id integer NOT NULL,
    name character varying(20) NOT NULL,
    manager_id integer NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.country
(
    id integer NOT NULL,
    name character varying(20) NOT NULL,
    short_name character varying(5) NOT NULL,
    code smallint NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.address_type
(
    id integer NOT NULL,
    name character varying(10) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.address
(
    id integer NOT NULL,
    full_address character varying(100) NOT NULL,
    address_type_id integer NOT NULL,
    customer_id integer NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.customer
(
    id integer NOT NULL,
    name character varying(20) NOT NULL,
    birth_place character varying(20) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.shipping_type
(
    id integer NOT NULL,
    name character varying(20) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.transport_firm
(
    id integer NOT NULL,
    name character varying(20) NOT NULL,
    shipping_type_id integer NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.payment
(
    id integer NOT NULL,
    payment_type_id integer NOT NULL,
    customer_id integer NOT NULL,
    name character varying(20) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.payment_type
(
    id integer NOT NULL,
    name character varying(20) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."order"
(
    id integer NOT NULL,
    order_date date NOT NULL,
    customer_id integer NOT NULL,
    payment_id integer NOT NULL,
    is_canceled boolean NOT NULL DEFAULT false,
    transport_firm_id integer NOT NULL,
    product_id integer NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE public.transaction_log
(
    id integer NOT NULL,
    table_name character varying(500) NOT NULL,
    transaction_date date NOT NULL
);

ALTER TABLE IF EXISTS public.product
    ADD FOREIGN KEY (catalog_id)
    REFERENCES public.catalog (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.product
    ADD FOREIGN KEY (color_id)
    REFERENCES public.color (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.product
    ADD FOREIGN KEY (warehouse_id)
    REFERENCES public.warehouse (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.product
    ADD FOREIGN KEY (country_of_origin_id)
    REFERENCES public.country (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.warehouse
    ADD FOREIGN KEY (manager_id)
    REFERENCES public.manager (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.address
    ADD FOREIGN KEY (address_type_id)
    REFERENCES public.address_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.address
    ADD FOREIGN KEY (customer_id)
    REFERENCES public.customer (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.order_cancellation
    ADD FOREIGN KEY (order_id)
    REFERENCES public."order" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.order_cancellation
    ADD FOREIGN KEY (cause_of_cancel_id)
    REFERENCES public.order_cancellation_cause_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.transport_firm
    ADD FOREIGN KEY (shipping_type_id)
    REFERENCES public.shipping_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.payment
    ADD FOREIGN KEY (payment_type_id)
    REFERENCES public.payment_type (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.payment
    ADD FOREIGN KEY (customer_id)
    REFERENCES public.customer (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."order"
    ADD FOREIGN KEY (product_id)
    REFERENCES public.product (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."order"
    ADD FOREIGN KEY (transport_firm_id)
    REFERENCES public.transport_firm (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."order"
    ADD FOREIGN KEY (payment_id)
    REFERENCES public.payment (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public."order"
    ADD FOREIGN KEY (customer_id)
    REFERENCES public.customer (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;